// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  username       String    @unique
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  description    String?

  accounts                     Account[]
  sessions                     Session[]
  SocialMedia                  SocialMedia?
  posts                        Post[]
  followers                    User[]         @relation("UserFollows")
  following                    User[]         @relation("UserFollows")
  UserComments                 Comment[]
  PostLikes                    Post[]         @relation("PostLikes")
  bookmarks                    Post[]         @relation("UserBookmarks")
  newFollowNotifications       Notification[] @relation("NewFollowNotification")
  userPostCommentNotifications Notification[] @relation("UserPostCommentNotification")
  userPostLikeNotifications    Notification[] @relation("UserPostLikeNotification")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name], name: "name_trigram_idx")
}

model Post {
  id        String       @id @default(cuid())
  slug      String       @unique
  title     String
  image     String?
  content   String
  likes     User[]       @relation("PostLikes")
  comments  Comment[]
  bookmarks User[]       @relation("UserBookmarks")
  topics    PostTopics[]
  author    User         @relation(fields: [authorId], references: [id])
  authorId  String

  createdAt DateTime @default(now())

  @@index([title], name: "title_trigram_idx")
}

model Topic {
  id        String       @id @default(cuid())
  topic     String       @unique
  posts     PostTopics[]
  createdAt DateTime     @default(now())

  @@index([topic], name: "topic_trigram_idx")
}

model PostTopics {
  id        String   @id @default(cuid())
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([parentCommentId])
}

model SocialMedia {
  id        String  @id @default(cuid())
  x         String?
  instagram String?
  facebook  String?
  youtube   String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Notification {
  id                      String   @id @default(cuid())
  newFollowusername       String?
  userPostCommentusername String?
  userReplyusername       String?
  userPostLikeusername    String?
  comment                 String?
  postTitle               String?
  postSlug                String?
  targetUserId            String
  createdAt               DateTime @default(now())

  newFollowUser       User? @relation("NewFollowNotification", fields: [newFollowusername], references: [username])
  userPostCommentUser User? @relation("UserPostCommentNotification", fields: [userPostCommentusername], references: [username])
  userPostLikeUser    User? @relation("UserPostLikeNotification", fields: [userPostLikeusername], references: [username])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
